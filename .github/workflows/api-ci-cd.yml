name: API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['api/**']
  pull_request:
    branches: [main]
    paths: ['api/**']

env:
  AWS_REGION: us-east-1
  STACK_NAME: ppal

jobs:
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: api/requirements.txt

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff safety bandit

    - name: Code formatting check (Black)
      run: black --check --diff .

    - name: Linting (Ruff)
      run: ruff check .

    - name: Security scan (Bandit)
      run: bandit -r . -ll || true

    - name: Dependency vulnerability scan (Safety)
      run: safety check || true

  build-and-validate:
    name: Build & Validate SAM Application
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build SAM application
      run: sam build --use-container

    - name: Validate SAM template
      run: sam validate

    - name: Package application (PR only)
      if: github.event_name == 'pull_request'
      run: |
        sam package \
          --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET }} \
          --s3-prefix ${{ github.head_ref }} \
          --output-template-file packaged-template.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-validate]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and deploy to staging
      run: |
        sam build --use-container
        sam deploy \
          --stack-name ${{ env.STACK_NAME }}-staging \
          --parameter-overrides Environment=staging \
          --resolve-s3 \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Health check
      run: |
        sleep 30
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }}-staging \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [ ! -z "$API_ENDPOINT" ]; then
          echo "Running health check against staging API"
          python3 health.py "$API_ENDPOINT" || echo "Health check failed but deployment completed"
        else
          echo "Could not determine API endpoint, trying basic connectivity"
          curl -f "https://bo1uqpm579.execute-api.us-east-1.amazonaws.com/Prod/" --max-time 30 || echo "Basic connectivity failed"
        fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-validate]
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build application
      run: sam build --use-container

    - name: Deploy to production
      run: |
        sam deploy \
          --stack-name ${{ env.STACK_NAME }} \
          --parameter-overrides Environment=production \
          --resolve-s3 \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Production health check
      run: |
        sleep 30
        # Try to get endpoint from stack, fallback to known endpoint
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text 2>/dev/null || echo "https://bo1uqpm579.execute-api.us-east-1.amazonaws.com/Prod")
        
        echo "Running comprehensive health check against production API"
        python3 health.py "$API_ENDPOINT"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, check CloudFormation console for details"
        # Could add automatic rollback logic here if needed