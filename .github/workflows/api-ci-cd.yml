name: API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['api/**']
  pull_request:
    branches: [main]
    paths: ['api/**']

env:
  AWS_REGION: us-east-1
  STACK_NAME: ppal

jobs:
  test:
    name: Run Tests & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    
    services:
      dynamodb-local:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: api/requirements.txt

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black ruff safety bandit

    - name: Code formatting check (Black)
      run: black --check --diff .

    - name: Linting (Ruff)
      run: ruff check .

    - name: Security scan (Bandit)
      run: bandit -r . -x tests/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability scan (Safety)
      run: safety check --json --output safety-report.json || true

    - name: Run unit tests with coverage
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: api
        name: api-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          api/coverage.xml
          api/htmlcov/
          api/bandit-report.json
          api/safety-report.json

  build:
    name: Build & Validate SAM Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build SAM application
      run: sam build --use-container

    - name: Validate SAM template
      run: sam validate

    - name: Run SAM local smoke tests
      run: |
        sam local start-api --port 3001 &
        sleep 30
        curl -f http://localhost:3001/ || exit 1
        pkill -f "sam local"

    - name: Package application (PR only)
      if: github.event_name == 'pull_request'
      run: |
        sam package \
          --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET }} \
          --s3-prefix ${{ github.head_ref }} \
          --output-template-file packaged-template.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and deploy to staging
      run: |
        sam build --use-container
        sam deploy \
          --stack-name ${{ env.STACK_NAME }}-staging \
          --parameter-overrides Environment=staging \
          --resolve-s3 \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Get API endpoint
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }}-staging \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text)
        
        # Run integration tests
        export API_BASE_URL=$API_ENDPOINT
        pytest tests/integration/ -v

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build application
      run: sam build --use-container

    - name: Deploy with blue/green strategy
      run: |
        sam deploy \
          --stack-name ${{ env.STACK_NAME }} \
          --parameter-overrides Environment=production \
          --resolve-s3 \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Run smoke tests
      run: |
        # Wait for deployment
        sleep 60
        
        # Get API endpoint  
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text 2>/dev/null || echo "https://bo1uqpm579.execute-api.us-east-1.amazonaws.com/Prod")
        
        # Health check
        curl -f $API_ENDPOINT/ || exit 1
        
        # Basic API tests
        export API_BASE_URL=$API_ENDPOINT
        pytest tests/smoke/ -v

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Get previous stack template
        aws cloudformation cancel-update-stack --stack-name ${{ env.STACK_NAME }} || true
        # Additional rollback logic can be added here

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deployment successful to production!"


    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Pipeline failed!"
